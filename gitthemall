#! /usr/bin/env python3
import argparse
from collections import namedtuple
import os
import os.path
import logging
import sys

from sh import git, ErrorReturnCode_1, ErrorReturnCode_128

logging.basicConfig(format='%(levelname)s: %(message)s')

def make_enum(name, values):
    return namedtuple(name, values)._make(values)

class RepoNotAvailable(Exception):
    pass

Action = make_enum('Action', ('fetch', 'commit', 'pull', 'push'))
TreeState = make_enum('TreeState', ('clean', 'dirty'))
HeadState = make_enum('HeadState', ('up_to_date', 'older', 'newer', 'forked'))

def fail(msg):
    'Fail program with printed message'
    logging.error(msg)
    sys.exit(1)

def goto(repo_path):
    'find repo and change directory'
    repo = os.path.expanduser(repo_path)
    logging.info('going to %s' % repo)
    if not os.path.isdir(repo):
        fail('No directory at %s!' % repo)
    if not os.path.isdir(os.path.join(repo, '.git')):
        fail('No git repo at %s!' % repo)
    os.chdir(repo)

def act(action, remote=None):
    'perform given git action (with side effects)'
    assert action in Action
    logging.info('calling %s' % action)

    if action == Action.fetch:
        if remote is None:
            try:
                git.fetch()
            except ErrorReturnCode_128 as e:
                raise RepoNotAvailable(e)
        else:
            try:
                git.fetch(remote)
            except ErrorReturnCode_128 as e:
                # clone to remote path
                repository = os.getcwd()
                directory = remote
                git.clone(repository, directory, bare=True)
    elif action == Action.commit:
        git.add('.', all=True)
        msg = 'auto-commit by gitthemall'
        git.commit(message=msg)
    elif action == Action.pull:
        if remote is None:
            git.pull(rebase=True)
        else:
            git.pull(remote, rebase=True)
    elif action == Action.push:
        if remote is None:
            git.push()
        else:
            git.push(remote)
    else:
        raise NotImplementedError()

def get_tree_state():
    'parse git status and return current tree state'
    for line in git.status(porcelain=True):
        if line.strip():
            return TreeState.dirty
    return TreeState.clean

def is_ancestor(parent, child):
    try:
        git('merge-base', parent, child, is_ancestor=True)
        return True
    except ErrorReturnCode_1:
        return False

def get_head_state(remote=None):
    local = 'HEAD'
    if remote is None:
        remote = '@{upstream}'
    else:
        _ls_remote = getattr(git, 'ls-remote')
        remote = _ls_remote(remote, 'HEAD').split()[0]
    if is_ancestor(remote, local):
        if is_ancestor(local, remote):
            return HeadState.up_to_date
        else:
            return HeadState.newer
    else:
        if is_ancestor(local, remote):
            return HeadState.older
        else:
            return HeadState.forked

def update(repo, actions, remote=None):
    'Update repo according to allowed actions.'
    goto(repo)
    try:
        act(Action.fetch, remote)
    except RepoNotAvailable as e:
        logging.warning('Skip unavailable repo: %s' % e)
        return

    # maybe commit?
    if get_tree_state() == TreeState.dirty:
        if Action.commit in actions:
            act(Action.commit)
        else:
            logging.warning('Skip repo (%s) with dirty tree:' % os.getcwd())
            for line in git.status(porcelain=True):
                logging.warning(line.rstrip())
            return

    assert get_tree_state() == TreeState.clean

    # maybe pull?
    if get_head_state(remote) in [HeadState.older, HeadState.forked]:
        if Action.pull in actions:
            act(Action.pull, remote)
        else:
            logging.warning('Skip repo (%s) with HEAD behind.' % os.getcwd())
            return

    # maybe push?
    if get_head_state(remote) == HeadState.newer:
        if Action.push in actions:
            act(Action.push, remote)
        else:
            logging.warning('Skip repo (%s) with HEAD ahead.' % os.getcwd())
            return

    assert get_head_state(remote) == HeadState.up_to_date

def override_remote(root, repo):
    'compute new remote location based of given root'
    if root is None:
        return None

    clean_path = repo.rstrip('/')
    name = os.path.basename(clean_path)
    return os.path.join(root, name)

def parse(config):
    'Parse config and yield repos with actions'
    with open(config) as f:
        for line in f:
            items = line.strip().split(',')
            repo_path, actions = items[0], items[1:]
            for a in actions:
                if a not in Action:
                    raise ValueError('Unknown action: %s' % a)
            yield repo_path, actions

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Keep git repos up-to-date.')
    parser.add_argument('--config', type=str, default='~/.gitthemall',
                        help='config file that lists repos')
    parser.add_argument('-v', '--verbose', default=False, action='store_true')
    parser.add_argument('--remote', type=str, default=None,
                        help='Override root path for remote (eg USB key)')
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)
    else:
        logging.getLogger().setLevel(logging.WARN)

    remote_root = args.remote
    config = os.path.expanduser(args.config)
    for repo, actions in parse(config):
        remote = override_remote(remote_root, repo)
        update(repo, actions, remote)
